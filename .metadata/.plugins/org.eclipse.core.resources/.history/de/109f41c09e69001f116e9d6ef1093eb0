package com.ss.article.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.AutoConfigureOrder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.ss.article.dto.articleDTO;
import com.ss.article.entity.Article;
import com.ss.article.repository.ArticleRepository;
import lombok.extern.slf4j.Slf4j;

@Controller
@ Slf4j		// 롬복에서 제공하는 로그 어노테이션
public class ArticleController {
	
	// JPA repository 인터페이스 객체를 선언하고 bean(스프링 컨테이너가 관리하는 객체)을
	// 스프링 컨테이너로부터 주입 받아서 사용함.
	
	// Ioc : 객체를 직접 관리하는 것이 아니라 외부에서 관리함.
	
	@Autowired
	private ArticleRepository articleSql;
	
	@GetMapping("/articles/new")
	public String newPage() {
		
		return "articles/new";
	}
	
	@PostMapping("/articles/create")
	public String createArticle(Model model, articleDTO dto) {
		System.out.println("ArticleController-createArticle");
		
		// 롬복에서 제공하는 @slf4j 어노테이션은 받으시 문자열만 가능함
		log.info(" 정보를 출력하는 로그");
		log.info(dto.toString());
		System.out.println(dto);
		
		// DTO의 데이터를 entity타입으로 변환해서 sql로 호출되서 실행할 수 있도록 함.
		Article article = dto.toEntity();
		log.info(article.toString());
		
		// save() : 리포지토리한테 데이터베이스에 저장해달라고 메소드 호출
		// id가 자동으로 증가.
		Article result = articleSql.save(article);
		log.info("결과값 : " + result);
		dto.setId(1L);                                                                                                                                                                                                                                  
		
//		return "articles/new";
		return "redirect:/articles";
	}
	
	@GetMapping("/articles")
	public String selectView(Model model) {
		log.info("ArticleController-selectView");
		
		// 테이블에 저장된 모든 글을 받아옴.
		List<Article> selectAll = articleSql.findAll();
		
		log.info(selectAll + "");
		
		model.addAttribute("articleList", selectAll);
		
		return "articles/view";
	}
	
	// 상세조회
	// {id}는 변경되는 값
	// 브라우저에서 /articles/글번호
	@GetMapping("/articles/{id}")
	public String detailView(@PathVariable Long id, Model model) {
		
		log.info("한 건 조회메서드 실행");
		log.info("id = " + id);
		
		// error : 만약 id 값으로 데이터를 찾으면 객체로 넘겨주면 되긴하는데 
		// 만약 데이터를 찾지 못하면 어떤 값을 넘여줘야 될지 설정이 안되어 있음
		// 데이터가 없으면 'orElse' 메서드를 이용하요 null 리턴
		Article article = articleSql.findById(id).orElse(null);
		
		model.addAttribute("article", article); 
		
		return "articles/detail";
	}
	
	@GetMapping("/articles/{id}/update")
	public String updateView(@PathVariable Long id, Model model) {
		
		log.info("수정 메서드 실행");
		log.info("id = " + id);
		
		Article article = articleSql.findById(id).orElse(null);
		
		model.addAttribute("article", article); 
		
		return "articles/update";
	}
	
	@PostMapping()
	public String updatePro(Model model, articleDTO dto) {
		
		log.info("updatePro() 실행");
		log.info("수정할 데이터 = " + dto);
		
		Article target = articleSql.findById(dto.getId()).orElse(null);
		
		if(target != null) {
			// 수정할 데이터가 있을 때, 엔터티로 변경해서 
			// sql에서 테이블에 매핑시킬 수 있도록 메서드 호출

			target.setTitle(dto.getTitle());
			target.setCon
			
			articleSql.save();
			
			
		}
		
		model.addAttribute("result", result); 
		
		return "redirect:/articles/"+ dto.getId();
	}
	
	

}

/*
 * 스프링(spring)
 *  - 자바 기반으로 애플리케이션 
 *  - 대규모 서비스(엔터프라이즈)
 *  - 서버성능, 안정성 , 보안
 *  
 * 스프링부트(spring boot)
 *  - 스프링의 복잡한 설정을 쉽게 만들어 준 것!
 *  - 빠르게 스프링 프로젝트를 설정 
 *    
 */